import { shuffle } from '$lib/random';
import { CONDITIONS, type Assignment, type TaskName } from '$lib/types';

/**
 * Infinite generator of all possible assignments.
 *
 * This generator will yield random assignments, but ensures that all possible
 * assignments are equally likely. That is, task and condition are both randomly
 * assigned, but counterbalanced.
 *
 * NOTE: assignments will be counterbalanced AS LONG AS only one server process
 * is creating the assignments and does not restart between all assignments!
 */
export function* generateAssignments(
    taskNames: TaskName[]
): Generator<Assignment[], undefined, undefined> {
    const allPossibleAssignments = [];
    for (const taskOrder of permutations(taskNames)) {
        for (const conditionOrder of permutations(CONDITIONS)) {
            const assignments: Assignment[] = taskOrder.map((task, index) => ({
                task,
                // Cycle the conditions so that the conditions repeat if there are
                // more tasks than conditions.
                condition: conditionOrder[index % CONDITIONS.length]
            }));
            allPossibleAssignments.push(assignments);
        }
    }

    while (true) {
        shuffle(allPossibleAssignments);
        yield* allPossibleAssignments;
    }
}

// Returns an array of all permutations of the given array.
// Generated by GitHub Copilot.
function permutations<T>(array: readonly T[]): T[][] {
    if (array.length <= 1) return [[...array]];

    const result = [];
    for (let i = 0; i < array.length; i++) {
        const element = array[i];
        // Slice out the current element.
        const rest = array.slice(0, i).concat(array.slice(i + 1));
        // Recurse to get permutations of the rest of the array.
        const restPermutations = permutations(rest);
        for (const perm of restPermutations) {
            result.push([element, ...perm]);
        }
    }
    return result;
}
